services:
  sistema-control-eventos:
    tty: true
    container_name: sistema-control-eventos
    build:
      context: .
      dockerfile: ./Dockerfile
    restart: on-failure
    volumes:
      - ".:/var/www/html"
    ports:
      - 8000:8000
    networks:
      - laravel_network

  # Servicio de Base de Datos PostgreSQL
  db:
    image: postgres:16-alpine # Puedes elegir la versión de PostgreSQL que necesites
    container_name: laravel_db
    restart: unless-stopped
    ports:
      - "${DB_FORWARD_PORT:-54321}:5432" # Opcional: Mapea un puerto del host a PostgreSQL para acceso externo
    environment:
      POSTGRES_DB: ${DB_DATABASE:-laravel}
      POSTGRES_USER: ${DB_USERNAME:-user}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-password}
    volumes:
      - pgdata:/var/lib/postgresql/data # Persistencia de datos de PostgreSQL
    networks:
      - laravel_network

  # Servicio pgAdmin
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: laravel_pgadmin
    restart: unless-stopped
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL:-admin@example.com}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD:-admin}
      PGADMIN_LISTEN_PORT: 80 # pgAdmin escuchará en el puerto 80 dentro de su contenedor
    ports:
      - "${PGADMIN_PORT:-5050}:80" # Mapea el puerto 5050 del host al 80 de pgAdmin
    volumes:
      - pgadmin_data:/var/lib/pgadmin # Persistencia de datos de pgAdmin
    depends_on:
      - db
    networks:
      - laravel_network

# Redes
networks:
  laravel_network:
    driver: bridge

# Volúmenes nombrados para persistencia
volumes:
  pgdata:
    driver: local
  pgadmin_data:
    driver: local